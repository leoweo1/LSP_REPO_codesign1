AI USAGE DOCUMENTATION - ESSAY QUESTIONS (1 & 3)
=================================================

AI Tool: ChatGPT-5
Date: 10/20/2025
Course: Large Scale Programming - Fall 2025
Assignment: Midterm Exam - Questions 1 & 3 (Essay Analysis)

QUESTION 1: COHESION ANALYSIS PROMPT HISTORY
---------------------------------------------

INTERACTION 1: Initial Cohesion Analysis
ME: I need to analyze the StudentPortalHelper class using Arthur Riel heuristics to determine if it has high or low cohesion. The class contains methods for GPA calculation, CSV export, email formatting, date formatting, payment processing, password checking, and caching. I need to identify which specific heuristics are violated.

AI: Provided analysis identifying the class as having very low cohesion. Explained violations of Arthur Riel's heuristics H.4 ("A class should capture one and only one key abstraction") and H.5 ("All operations should be functionally related to the class name"). Noted this is a "god class" mixing unrelated responsibilities.

INTERACTION 2: Cohesion Principles
ME: Can you explain what high cohesion means and why it's important for software design? Also, should a well-designed class have high or low cohesion?

AI: Explained that high cohesion means all class elements focus on a single purpose, making code easier to understand, maintain, test, and reuse. Confirmed that well-designed classes should have high cohesion to reduce complexity and minimize change impacts.

INTERACTION 3: Refactoring Strategy
ME: How would you refactor the StudentPortalHelper class to improve its structure? I need a general approach.

AI: Proposed breaking it into focused classes: AcademicCalculator, FileExporter, NotificationService, SecurityUtils, PaymentProcessor, DateFormatter, and CacheService - each with single responsibility.

QUESTION 3: CAR MANUFACTURER UML ANALYSIS PROMPT HISTORY
---------------------------------------------------------

INTERACTION 1: Inheritance vs Composition Analysis
ME: I have a car manufacturer system with a UML diagram showing Car class with Base, Sports, Luxury subclasses, and Engine class with Electric, Petrol subclasses. The requirement is that customers can change trim levels dynamically. Explain why the current inheritance structure doesn't support this and how to refactor using composition.

AI: Explained that the current inheritance structure (Base/Sports/Luxury as subclasses) creates fixed object types - once a car is instantiated as a specific trim, it cannot change. Inheritance represents "is-a" relationships that are static.

INTERACTION 2: Composition Solution
ME: How would you use composition to solve the trim-level change problem?

AI: Proposed the State/Strategy pattern: Create a TrimLevel interface with BaseTrim, SportsTrim, LuxuryTrim implementations. The Car class would hold a reference to a TrimLevel object and have a setTrimLevel() method to change it dynamically at runtime.

INTERACTION 3: Design Pattern Connection
ME: How does this relate to design patterns? Which pattern is most appropriate?

AI: Identified this as primarily the State Pattern (or Strategy Pattern) where the trim level represents a state that can change. The Car's behavior can change based on its current TrimLevel state without altering the Car class itself.

SYNTHESIS AND ORIGINAL CONTRIBUTIONS:
-------------------------------------
- Connected cohesion analysis to specific code examples from the exam
- Applied inheritance vs composition principles to the car manufacturer scenario
- Integrated multiple AI responses into coherent, exam-appropriate answers
- Added personal insights about maintainability and object identity preservation
- Verified solutions against object-oriented design principles from course materials

ETHICAL USAGE DECLARATION:
--------------------------
AI assistance was used for conceptual clarification, brainstorming, and exploring alternative solutions. Final answers represent my understanding of the material. All course concepts were verified against lectures and textbooks. 
